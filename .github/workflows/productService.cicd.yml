name: CI/CD Pipeline Service Product

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Install dependencies
              run: yarn install

            - name: Run build
              run: yarn build

            - name: Archive build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build
                  path: ./build

    deploy:
        runs-on: ubuntu-latest
        needs: build
        if: github.ref == 'refs/heads/main'

        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build
                  path: ./build

            - name: Prepare Deployment Directories
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: 22
                  script: |
                      mkdir -p /home/ubuntu/apps/build
                      mkdir -p /home/ubuntu/apps/build/configs

            - name: Copy files to Server
              uses: appleboy/scp-action@master
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: 22
                  source: "./build/*"
                  target: "/home/ubuntu/apps/build"
                  strip_components: 1

            - name: Create .env File
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: 22
                  script: |
                      echo "NODE_ENV=production" > /home/ubuntu/apps/build/configs/.env.production
                      echo "PORT=${{ secrets.PORT }}" >> /home/ubuntu/apps/build/configs/.env.production
                      echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> /home/ubuntu/apps/build/configs/.env.production

            - name: Install Dependencies and Restart Application
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_IP }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: 22
                  script: |
                      # Load NVM if it exists
                      if [ -f "$HOME/.nvm/nvm.sh" ]; then
                        source $HOME/.nvm/nvm.sh
                        nvm use 20
                      else
                        echo "NVM is not installed. Installing..."
                        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
                        source $HOME/.nvm/nvm.sh
                        nvm install 20
                        nvm use 20
                      fi

                      # Check if yarn is installed
                      if ! command -v yarn &> /dev/null; then
                        echo "Yarn is not installed. Installing..."
                        npm install -g yarn
                      fi

                      # Check if PM2 is installed
                      if ! command -v pm2 &> /dev/null; then
                        echo "PM2 is not installed. Installing..."
                        npm install -g pm2
                      fi

                      # Change to the build directory
                      cd /home/ubuntu/apps/build

                      # Install production dependencies
                      yarn install --production

                      # Check if the PM2 process is running and restart or start the application
                      if pm2 show product-service > /dev/null; then
                        echo "Application is running. Restarting..."
                        pm2 restart product-service
                      else
                        echo "Application is not running. Starting..."
                        pm2 start yarn --name product-service -- start
                      fi

            - name: Notify Success
              run: echo "Deployment successful!"

            - name: Notify Failure
              if: failure()
              run: echo "Deployment failed!"
